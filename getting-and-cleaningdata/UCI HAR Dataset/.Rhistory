install.packages("Matrix")
invA <- matrix.inverse( A )
install.packages("math")
a <- makeVector(10)
a(10)
a
set
set()
makeVector(10)
makeVector(10)$set
makeVector$set
makeVector($set
makeVector()$set
makeVector()$set(10)
a <- makeVector()$set(10)
a
a(10)
a <- makeVector()$get(10)
a <- makeVector()$get()
a
a
makeCacheMatrix <- function(x = matrix())
{
inv <- NULL # inv will be our 'inverse matrix' and it's reset to NULL every
# time makeCacheMatrix is called
set <- function(y)
{
x <<- y
inv <<- NULL
}
get <- function() # This function returns the original matrix
{
x
}
setInverse <- function(inverse) # This is called by cacheSolve()
{
inv
}
getInverse <- function() # This will return the cached value
{
inv
}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
# This list is returned with the newly created object. It lists all the
# functions that are part of the object.
}
makeCacheMatrix(matrix(c(1:4),2,2))
makeCacheMatrix().get()
makeCacheMatrix(matrix(c(1:4),2,2))$get()
makeCacheMatrix(matrix(c(1:4),2,2))$set()
makeCacheMatrix(matrix(c(1:4),2,2))$set(10)
makeCacheMatrix(matrix(c(1:4),2,2))$get()
makeCacheMatrix(matrix(c(1:4),2,2))$setInverse()
makeCacheMatrix(matrix(c(1:4),2,2))$getInverse()
makeCacheMatrix(matrix(c(1:4),2,2))$setInverse(10)
makeCacheMatrix(matrix(c(1:4),2,2))$getInverse()
f1 <- function(x) x*y
y = 10
f1(2)
makeCacheMatrix <- function(x = matrix()) {
+   i  <- NULL
+   set  <- function(y){
+     x <<- y
+     i <<- NULL
+   }
mvc <- function(x = numeric()) {
+   i  <- NULL
+   set  <- function(y){
+     x <<- y
+     i <<- NULL
+   }
mvc <- function(x = numeric()) {
+   i  <- NULL
+   set  <- function(y){
+     x <<- y
+     i <<- NULL
+   }
mvc <- function(x = numeric()) {
+   i  <- NULL
+   set  <- function(y){
+     x <<- y
+     i <<- NULL
+   }}
mvc <- function(x = numeric()) {
+   i  <- NULL
+   set  <- function(y){
+     x <<- y
+     i <<- NULL
+   }}
mvc <- function(x = numeric()) {
+   i  <- NULL
+   set  <- function(y){
+     x <<- y
+     i <<- NULL
+   }
mvc <- function(x = numeric()) {
+   set  <- function(y){
+     x <<- y
+   }
mvc <- function(x = numeric()) {
+   set  <- function(y){
+     x <<- y
+   }
mvc <- function(x = numeric()) {
+   set  <- function(y){
+     x <<- y
+   } }
mvc <- function(x = numeric()) {
set  <- function(y){
x <<- y
}
}
mvc
mvc()
mvc(10)
mvc <- function(x = numeric()) {
+   set  <- function(y){
+     x <<- y
+   } }
mvc <- function(x = numeric()) {
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
return x,y
mvc <- function(x = numeric()) {
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
return x
}
^1
^1
mvc <- function(x = numeric()) {
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
return x
}
mvc <- function(x = numeric()) {
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
}
mvc <- function(x = numeric()) {
i  <- NULL
set  <- function(y){
x <<- y
i <<- NULL
}
}
mvc
mvc()
mvc(10)
mvc(10).set(15)
mvc(10)$set(15)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
make.power
make.power(2)
square <- make.power(2)
square(4)
ls()
makeVector
makeVector(10)
a <- makeVector(10)
x
a$set(5)
a$get()
a$setmean(4)
a$getmean(4)
a <- makeVector(1:10)
a
a$get()
a$setmean(1:10)
a$getmean(1:10)
square$pow(4)
make.power
make.power(2)
make.power <- function(n) {
pow <- function(x) {
x^n
}
list(pow=pow)
}
make.power(2)
a <- make.power(2)
a$pow(2)
pow(2)
a(2)
a <- make.power(2)
a(2)
square <- make.power(2)
suqare(2)
make.power <- function(n) {
pow <- function(x) {
x^n
}
}
square <- make.power(2)
suqare(2)
ls()
ls(environment(square))
square$pow(2)
ls(environment(make.power))
ls()
list(ls()=rm)
list(ls().rm)
list(ls())
list(rm.ls())
list(rm=ls())
ls()
rm.list(ls())
list(ls())
make.power <- function(n) {
pow <- function(x) {
x^n
}
}
square <- make.power(2)
square(2)
make.power <- function(n) {
pow <- function(x) {
x^n
}
list(pow=pow)
}
square(2)
square <- make.power(2)
square(2)
square$pow(2)
rm(list=ls())
ls()
makeCacheMatrix <- function(x = matrix())
{
inv <- NULL # inv will be our 'inverse matrix' and it's reset to NULL every
# time makeCacheMatrix is called
set <- function(y)
{
x <<- y
inv <<- NULL
}
get <- function() # This function returns the original matrix
{
x
}
setInverse <- function(inverse) # This is called by cacheSolve()
{
inv
}
getInverse <- function() # This will return the cached value
{
inv
}
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
# This list is returned with the newly created object. It lists all the
# functions that are part of the object.
}
args(makeCacheMatrix)
a <- makeCacheMatrix(matrix(c(1:4),2,2))
a
a$get()
a$set(matrix(c(5:8),2,2))
a$get()
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if(!is.null(inv))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
args(cacheSolve)
ls()
ls(environmet(cacheSolve()))
cacheSolve(a)
a$getInverse()
a$setInverse()
cacheSolve(a)
ls()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(5)
makeVector(5)$getmean()
makeVector(5)$get()
makeVector(5)$set(10)
makeVector(5)$get()
debug(makeVector)
makeVector(5)$get()
next()
next()
makeVector(5)$get()
makeVector(5)$set(10)
makeVector(5)$getmean(10)
makeVector(5)$get()
makeVector(10)$get()
makeVector(10)$set(20)
a <- makeVector(10)
a$get()
quit
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a
a <- makeVector(5)
a
a$get()
a$set()
a$set(10)
a
a$get()
m1 <- cachemean(a$get())
a
cachemean(a)
a <- makeVector(1:5)
a
a$get()
cachemean(a)
a$set(5:8)
a$get()
cachemean(a)
a$getmean()
a$getmean()
a$setmean(7)
a$getmean()
cachemean(a)
a$get()
mean(a$get())
makeCacheMatrix <- function(x = matix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeCacheMatrix(matrix(c(1:4)2,2))
makeCacheMatrix(matrix(c(1:4),2,2))
mcm <- makeCacheMatrix(matrix(c(1:4),2,2))
mcm
mcm$get()
cacheSolve(mcm$get())
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- Solve(data, ...)
x$setinv(inv)
inv
}
mcm$getinv()
mcm$get()
Solve(mcm$get())
solve(mcm$get()
)
solve(mcm$get())
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(mcm$get())
cacheSolve(mcm
)
cacheSolve(mcm)
cacheSolve(mcm)
mcm$set(cacheSolve(mcm))
cacheSolve(mcm)
cacheSolve(mcm)
getwd()
setwd("./datasciencecoursera/UCI HAR Dataset")
getwd()
list.files("./test")
X_test <- read.table("test/X_test.txt")
str(X_test)
X_train <- read.table("train/X_train.txt")
str(X_train)
?rbind
X <- rbind(X_train, X_test)
nrow(X)
nrow(Y)
nrow(X_train)
nrow(X_test)
y_train <- read.table("train/y_train.txt")
y_test <- read.table("test/y_test.txt")
Y <- rbind(y_train, y_test)
str(Y)
subject_train <- read.table("train/subject_train.txt")
subject_test <- read.table("test/subject_test.txt")
Subject <- rbind(subject_train, subject_test)
list.files()
getwd()
Features <- read.table("features.txt")
str(Subject)
names(X)
names(Y)
names(Subject)
names(Subject)<-c("subject")
names(Subject)
names(Y)<- c("activity")
names(Y)
names(Features)
Feautures[,2]
Features[,2]
names(X)
Features[,2]
Features[1,]
Features[,2]
Features
X
names(X)<- Features[ ,2]
head(X)
Features[ ,2]
head(X)
grep("-mean\\(\\)|-std\\(\\)", features[, 2])
grep("-mean\\(\\)|-std\\(\\)", Features[, 2])
grep("-mean\\(\\), Features[, 2])
""
)
""
grep("-mean\\(\\)", Features[, 2])
grep("-mean", Features[, 2])
?grep
grep("[a-z]", letters)
letters
grep("-mean\\(\\)", Features[, 2])
head(Features)
mean.sd <- grep("-mean\\(\\)|-std\\(\\)", Features[, 2])
mean.sd
X[, mean.sd]
X.mean.sd <- X[, mean.sd]
